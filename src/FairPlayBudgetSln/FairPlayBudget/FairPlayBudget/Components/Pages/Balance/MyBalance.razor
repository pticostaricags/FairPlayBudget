@using FairPlayBudget.Interfaces.Services
@using FairPlayBudget.Models.Balance
@using Microsoft.AspNetCore.Authorization
@attribute [Route(Common.Constants.AppRoutes.MyBalance)]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
<PageTitle>
    @nameof(Common.Constants.AppRoutes.MyBalance)
</PageTitle>

<h3>
    @nameof(Common.Constants.AppRoutes.MyBalance)
</h3>

@if (this.MyBalanceModel != null)
{
    <div class="grid-container" style="max-width:800px; overflow:auto;">
        <QuickGrid Items="@this.MyBalanceModel" Pagination="@this.paginationState">
            <PropertyColumn Property="@(p=>p.DateTime)" Sortable="true"
                            IsDefaultSortColumn="true"
                            InitialSortDirection="@SortDirection.Descending">
            </PropertyColumn>
            <PropertyColumn Property="@(p=>p.TransactionType)" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(p=>p.Amount)" Format="c" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(p=>p.Description)" Sortable="true"></PropertyColumn>
        </QuickGrid>
    </div>

    <Paginator State="@this.paginationState"></Paginator>
    <p>
        Total Expenses: @TotalExpenses.ToString("c")
    </p>
    <p>
        Total Income: @TotalIncome.ToString("c")
    </p>
    <p>
        @if (this.NetIncome < 0)
        {
            <label class="text-danger">
                Net Income: @NetIncome.ToString("c")
            </label>
        }
        else
        {
            <label class="form-label">
                Net Income: @NetIncome.ToString("c")
            </label>
        }
    </p>
}

@code {
    [Inject]
    private IBalanceService? BalanceService { get; set; }
    private IQueryable<MyBalanceModel>? MyBalanceModel { get; set; }
    private PaginationState paginationState = new PaginationState()
        {
            ItemsPerPage = 10
        };
    private decimal TotalExpenses { get; set; } = 0;
    private decimal TotalIncome { get; set; } = 0;
    private decimal NetIncome { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        var result = await this.BalanceService!.GetMyBalanceAsync(
            CancellationToken.None);
        this.MyBalanceModel = result.AsQueryable();
        this.TotalExpenses = this.MyBalanceModel
        .Where(p => p.TransactionType == "Debit").Sum(p => p.Amount);
        this.TotalIncome = this.MyBalanceModel
        .Where(p => p.TransactionType == "Credit").Sum(p => p.Amount);
        this.NetIncome = this.TotalIncome - this.TotalExpenses;
    }
}
