@using FairPlayBudget.Common.Enums
@using FairPlayBudget.Interfaces.Services
@using FairPlayBudget.Models.Balance
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@attribute [Route(Common.Constants.AppRoutes.MyBalance)]
@attribute [Authorize]
@attribute [StreamRendering(enabled: true)]
@rendermode RenderMode.InteractiveServer
<PageTitle>
    @nameof(Common.Constants.AppRoutes.MyBalance)
</PageTitle>

<FairPlayBudget.Components.Spinners.LoadingIndicator ShowSpinners="@IsBusy"></FairPlayBudget.Components.Spinners.LoadingIndicator>

<h3>
    @nameof(Common.Constants.AppRoutes.MyBalance)
</h3>

@if (this.SelectableBudgetNames != null)
{
    <InputSelect ValueExpression="@(() => this.SelectedBudgetName)"
                 Value="@this.SelectedBudgetName"
                 ValueChanged="@((string selectedValue) => OnSelectedBudgetNameChanged(selectedValue))">
        @foreach (var singleBudgetName in this.SelectableBudgetNames)
        {
            <option value="@singleBudgetName">@singleBudgetName</option>
        }
    </InputSelect>
}
<InputSelect ValueExpression="@( () => this.SelectedCurrency)"
    Value="@this.SelectedCurrency"
    ValueChanged="@( (Currency? selectedValue) => OnSelectedCurrencyChanged(selectedValue))"
>
<option value="">Select a Currency</option>
    @foreach(var singleCurrency in Enum.GetValues<Currency>())
    {
        <option value="@singleCurrency">@singleCurrency.ToString()</option>
    }
</InputSelect>
@if (this.MyBalanceModel != null && this.SelectedCurrency != null)
{
    <div class="grid-container" style="max-width:800px; overflow:auto;">
        <QuickGrid Items="@this.MyBalanceModel" Pagination="@this.paginationState">
            <PropertyColumn Property="@(p=>p.DateTime)" Sortable="true"
                            IsDefaultSortColumn="true"
                            InitialSortDirection="@SortDirection.Descending">
            </PropertyColumn>
            <PropertyColumn Property="@(p=>p.TransactionType)" Sortable="true"></PropertyColumn>
            <TemplateColumn Sortable="true">
                @context.Amount.ToString("c", this.UseCulture)
            </TemplateColumn>
            <PropertyColumn Property="@(p=>p.Description)" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(p=>p.Currency)" Sortable="true"></PropertyColumn>
        </QuickGrid>
    </div>

    <Paginator State="@this.paginationState"></Paginator>
    <p>
        Total Expenses: @TotalExpenses.ToString("c", this.UseCulture)
    </p>
    <p>
        Total Income: @TotalIncome.ToString("c", this.UseCulture)
    </p>
    <p>
        @if (this.NetIncome < 0)
        {
            <label class="text-danger">
                Net Income: @NetIncome.ToString("c", this.UseCulture)
            </label>
        }
        else
        {
            <label class="form-label">
                Net Income: @NetIncome.ToString("c", this.UseCulture)
            </label>
        }
    </p>
}

@code {
    [Inject]
    private IBalanceService? BalanceService { get; set; }
    private IQueryable<MyBalanceModel>? MyBalanceModel { get; set; }
    private string? SelectedBudgetName { get; set; }
    private PaginationState paginationState = new PaginationState()
        {
            ItemsPerPage = 10
        };
    private decimal TotalExpenses { get; set; } = 0;
    private decimal TotalIncome { get; set; } = 0;
    private decimal NetIncome { get; set; } = 0;
    private bool IsBusy { get; set; }
    private string[]? SelectableBudgetNames { get; set; }
    private Currency? SelectedCurrency { get; set; }
    private CultureInfo? UseCulture { get; set; }
    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;
        this.SelectableBudgetNames =
        await this.BalanceService!.GetBudgetNamesAsync(cancellationToken: CancellationToken.None);
        this.SelectedBudgetName = this.SelectableBudgetNames.First();
        this.IsBusy = false;
    }

    private async Task LoadDataAsync()
    {
        var result = await this.BalanceService!.GetMyBalanceAsync(this.SelectedBudgetName!,
            this.SelectedCurrency!.Value,
            CancellationToken.None);
        this.MyBalanceModel = result.AsQueryable();
        this.TotalExpenses = this.MyBalanceModel
        .Where(p => p.TransactionType == "Debit").Sum(p => p.Amount);
        this.TotalIncome = this.MyBalanceModel
        .Where(p => p.TransactionType == "Credit").Sum(p => p.Amount);
        this.NetIncome = this.TotalIncome - this.TotalExpenses;
    }

    private async Task OnSelectedBudgetNameChanged(string selectedValue)
    {
        this.SelectedBudgetName = selectedValue;
        await this.LoadDataAsync();
    }

    private CultureInfo GetCultureFromCurrency(Currency currency)
    {
        switch (currency)
        {
            case Currency.CRC:
                return new CultureInfo("es-CR");
            case Currency.USD:
                return new CultureInfo("en-US");
            default:
                return new CultureInfo("en-US");
        }
    }

    private async Task OnSelectedCurrencyChanged(Currency? selectedValue)
    {
        this.SelectedCurrency = selectedValue;
        this.UseCulture = GetCultureFromCurrency(selectedValue!.Value);
        await LoadDataAsync();
    }
}
