@using FairPlayBudget.Interfaces.Services
@using FairPlayBudget.Models.MonthlyBudgetInfo
@using Microsoft.AspNetCore.Authorization
@attribute [Route(Common.Constants.AppRoutes.MyMonthlyBudgets)]
@attribute [Authorize]
@attribute [StreamRendering(enabled: true)]
@rendermode RenderMode.InteractiveServer

<FairPlayBudget.Components.Spinners.LoadingIndicator ShowSpinners="@this.IsBusy"></FairPlayBudget.Components.Spinners.LoadingIndicator>
<PageTitle>
    @nameof(Common.Constants.AppRoutes.MyMonthlyBudgets)
</PageTitle>

<h3>
    @nameof(Common.Constants.AppRoutes.MyMonthlyBudgets)
</h3>

@if (this.MyBudgetsList?.Count() > 0)
{
    <QuickGrid Items="@this.MyBudgetsList.AsQueryable()" Virtualize="true" ItemSize="35">
        <TemplateColumn>
            <a href="@($"{Common.Constants.AppRoutes.CreateMonthlyBudgetInfo}/{context.MonthlyBudgetInfoId}")">
                @context.MonthlyBudgetInfoId
            </a>
        </TemplateColumn>
        <PropertyColumn Property="@(p=> p.Description)"></PropertyColumn>
    </QuickGrid>
}

@code {
    [Inject]
    private IMonthlyBudgetInfoService? MonthlyBudgetInfoService { get; set; }
    private MonthlyBudgetInfoModel[]? MyBudgetsList { get; set; }
    private bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.MyBudgetsList = await this.MonthlyBudgetInfoService!
        .GetMyMonthlyBudgetInfoListAsync(CancellationToken.None);
    }
}
