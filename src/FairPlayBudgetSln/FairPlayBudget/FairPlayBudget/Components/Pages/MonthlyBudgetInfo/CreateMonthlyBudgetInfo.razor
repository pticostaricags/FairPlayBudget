@using FairPlayBudget.Common.Enums
@using FairPlayBudget.Interfaces.Services
@using FairPlayBudget.Models.MonthlyBudgetInfo
@using Microsoft.AspNetCore.Authorization
@attribute [Route(Common.Constants.AppRoutes.CreateMonthlyBudgetInfo)]
@attribute [Route($"{Common.Constants.AppRoutes.CreateMonthlyBudgetInfo}/{{MonthlyBudgetInfoId:int}}")]
@attribute [Authorize]
@rendermode RenderMode.InteractiveServer

<FairPlayBudget.Components.Spinners.LoadingIndicator ShowSpinners="@this.IsBusy"></FairPlayBudget.Components.Spinners.LoadingIndicator>
<PageTitle>
    @nameof(Common.Constants.AppRoutes.CreateMonthlyBudgetInfo)
</PageTitle>

<h3>
    @nameof(Common.Constants.AppRoutes.CreateMonthlyBudgetInfo)
</h3>
<EditForm FormName="frmMonthlyBudgetInfo" Model="@this.createMonthlyBudgetInfoModel"
          OnValidSubmit="OnValidSubmitAsync" Enhance>
    <div class="mb-3">
        <ObjectGraphDataAnnotationsValidator />
    </div>
    <div class="mb-3">
        <label class="form-label">@nameof(CreateMonthlyBudgetInfoModel.Description)</label>
        <InputText class="form-control" @bind-Value="@createMonthlyBudgetInfoModel.Description"></InputText>
        <ValidationMessage For="@( ()=> createMonthlyBudgetInfoModel.Description)"></ValidationMessage>
    </div>
    @if (this.createMonthlyBudgetInfoModel!.Transactions?.Count > 0)
    {
        <div class="row">
            <div class="col">
                @nameof(CreateTransactionModel.TransactionType)
            </div>
            <div class="col">
                @nameof(CreateTransactionModel.TransactionDateTime)
            </div>
            <div class="col">
                @nameof(CreateTransactionModel.Amount)
            </div>
            <div class="col">
                @nameof(CreateTransactionModel.Description)
            </div>
            <div class="col">
                @nameof(CreateTransactionModel.Currency)
            </div>
        </div>
        foreach (var singleTransaction in this.createMonthlyBudgetInfoModel.Transactions)
        {
            <div class="row">
                <div class="col">
                    <InputSelect class="form-select"
                                 ValueExpression="@( () => singleTransaction.TransactionType)"
                                 Value="@singleTransaction.TransactionType"
                                 ValueChanged="@( (TransactionType? selectedValue) => singleTransaction.TransactionType=selectedValue)">
                        <option value="">Select Transaction Type</option>
                        <option value="@TransactionType.Debit">@TransactionType.Debit</option>
                        <option value="@TransactionType.Credit">@TransactionType.Credit</option>
                    </InputSelect>
                    <ValidationMessage For="@( () => singleTransaction.TransactionType)"></ValidationMessage>
                </div>
                <div class="col">
                    <InputDate class="form-control" @bind-Value="@singleTransaction.TransactionDateTime"></InputDate>
                    <ValidationMessage For="@( () => singleTransaction.TransactionDateTime)"></ValidationMessage>
                </div>
                <div class="col">
                    <InputNumber class="form-control" @bind-Value="@singleTransaction.Amount"></InputNumber>
                    <ValidationMessage For="@( () => singleTransaction.Amount)"></ValidationMessage>
                </div>
                <div class="col">
                    <InputText class="form-control" @bind-Value="@singleTransaction.Description"></InputText>
                    <ValidationMessage For="@( () => singleTransaction.Description)"></ValidationMessage>
                </div>
                <div class="col">
                    <InputSelect class="form-select"
                                 ValueExpression="@( () => singleTransaction.Currency)"
                                 Value="@singleTransaction.Currency"
                                 ValueChanged="@( (Currency? selectedValue) => singleTransaction.Currency = selectedValue)">
                        <option value="">Select a Currency</option>
                        @foreach (var singleCurrency in Enum.GetValues<Currency>())
                        {
                            <option value="@singleCurrency">@singleCurrency.ToString()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@( () => singleTransaction.Currency)"></ValidationMessage>
                </div>
            </div>
        }
    }
    <div class="mb-3">
        <button class="btn btn-outline-secondary" type="button"
                @onclick="OnAddTransactionClicked">
            Add Transaction
        </button>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary" type="submit">Save</button>
    </div>
</EditForm>

Import From File:
<InputFile OnChange="OnFileSelected" accept=".csv"></InputFile>
Override Currency:
<InputSelect class="form-select"
             ValueExpression="@( () => this.SelectedCurrencyForOverride)"
             Value="@this.SelectedCurrencyForOverride"
             ValueChanged="( (Currency selectedValue) => OnOverrideCurrencyChanged(selectedValue) )">
    @foreach (var singleCurrency in Enum.GetValues<Currency>())
    {
        <option value="@singleCurrency">@singleCurrency.ToString()</option>
    }
</InputSelect>
<button class="btn btn-secondary" type="button" @onclick="OnOverrideCurrencyButtonClicked">Set Currency</button>
@code {
    [Parameter]
    public int? MonthlyBudgetInfoId { get; set; }
    [Inject]
    private IMonthlyBudgetInfoService? MonthlyBudgetInfoService { get; set; }
    [Inject]
    private NavigationManager? NavigationManager { get; set; }
    [SupplyParameterFromForm]
    private CreateMonthlyBudgetInfoModel createMonthlyBudgetInfoModel { get; set; } =
    new CreateMonthlyBudgetInfoModel()
        {
            Transactions = new List<CreateTransactionModel>()
        };
    private Currency SelectedCurrencyForOverride = Currency.USD;
    private bool IsBusy { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (this.MonthlyBudgetInfoId != null)
        {
            this.createMonthlyBudgetInfoModel = await this.MonthlyBudgetInfoService!
            .LoadMonthlyBudgetInfoAsync(this.MonthlyBudgetInfoId!.Value,
            CancellationToken.None);
        }
    }

    private async Task OnValidSubmitAsync()
    {
        IsBusy = true;
        if (this.MonthlyBudgetInfoId == null)
        {
            await this.MonthlyBudgetInfoService!
            .CreateMonthlyBudgetInfoAsync(this.createMonthlyBudgetInfoModel,
            CancellationToken.None);
        }
        else
        {
            await this.MonthlyBudgetInfoService!
            .UpdateMonthlyBudgetInfoAsync(this.MonthlyBudgetInfoId.Value,
            this.createMonthlyBudgetInfoModel, CancellationToken.None);
        }
        IsBusy = false;
        this.NavigationManager!.NavigateTo(Common.Constants.AppRoutes.MyBalance);
    }

    private void OnAddTransactionClicked()
    {
        this.createMonthlyBudgetInfoModel.Transactions!.Add(new CreateTransactionModel());
    }

    private async Task OnFileSelected(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        IsBusy = true;
        if (inputFileChangeEventArgs.FileCount == 1)
        {
            int maxAllowedSizeInMB = 10;
            int maxAllowedSizeInKb = maxAllowedSizeInMB * 1024 * 1024;
            var stream = inputFileChangeEventArgs.File.OpenReadStream(maxAllowedSizeInKb,
            cancellationToken: CancellationToken.None);
            this.createMonthlyBudgetInfoModel = await this.MonthlyBudgetInfoService!
            .ImportFromTransactionsFileStreamAsync(stream, cancellationToken: CancellationToken.None);
        }
        IsBusy = false;
    }


    private void OnOverrideCurrencyChanged(Currency? selectedNewCurrency)
    {
        this.SelectedCurrencyForOverride = selectedNewCurrency!.Value;
    }

    private void OnOverrideCurrencyButtonClicked()
    {
        IsBusy = true;
        if (this.createMonthlyBudgetInfoModel.Transactions?.Count > 0)
        {
            foreach (var singleTransaction in this.createMonthlyBudgetInfoModel.Transactions)
            {
                singleTransaction.Currency = SelectedCurrencyForOverride;
            }
        }
        IsBusy = false;
    }
}
